ansible 자동화 기능 관련

1. control server에 ansible 설치 필요
  - python이 사전에 설치되어 있어야 함(python3 기본)
  - centos : epel-release 설치 필요
    python version 2로 3로 업데이트 시 ???
      - python3 -m pip install --upgrade pip
      - python3 -m pip install --user ansible
      - python3 -m pip show ansible
  - ubuntu : 불필요

2. SSH를 통한 연결을 위한 사전 설정(OpenSSH 서버 필요) : rsa 인증 ?
  - 사전에 ssh 인증을 통해 자동 연결 가능 : root 계정만
  1) RSA방식의 개인키, 공개키 생성
     ssh-keygen -t ed25519 -C "my key" # type, comment
     또는 ssh-keygen 
      - passphrase : kal   #키를 보다 안전하게 함
        => ~/.ssh 에 키가 생성됨(개인키, 공개키.pub)
     1-1) key 추가 생성 이름 지정
      ssh-keygen -t ed25519 -C "ansible"
      Enter file in which to save the key (/home/kal/.ssh/id_ed25519): 
       /home/kal/.ssh/ansible  #저장할 경로를 지정
      나머지는 그냥 enter
    
  2) 나의 공개키를 상대방 서버에 전송
     ssh-copy-id -i ~/.ssh/id_ed25519.pub #내가 생성한 공개key
       [상대방의 IP]
     암호 요구 : 상대방의 root 암호를 넣음.
     => 상대방 서버에 authorized_keys가 생성됨(나의 public key)
  * 내 개인키를 가지고 감싸면 서버에서 나의 공개키로 검증
    => 핵심은 내 개인키는 잘 간수해야함
  3) passphrase 자동 입력
     eval $(ssh-agent)
     ssh-add
     alias ssha='eval $(ssh-agent) && ssh-add'
   
3. 기본 설정 확인
  기본 구성 파일 : ~/에 .ansible.cfg 가 있으면 이것을 사용
   - 없으면 /etc/ansible/ansible.cfg 사용
   - 특정폴더에서 작업 시 => 작업 폴더내의 cfg 파일을 사용
   (cfg => inventory, key, ask_pass 등을 설정)

  # 수동으로 key, inventory, hosts 지정 #
  ansible all --key-file ~/.ssh/ansible -i inventory -m ping
  내가 생성한 폴더에 ansible.cfg 파일을 생성
	[defaults]
	inventory = inventory
	private_key_file = ~/.ssh/ansible
   ansible all -m ping 
   (key, inventory를 ansible.cfg에서 가지고옮)
     => 내가 생성한 폴더에 실행 하면 key, inventory에 대해
       ansible.cfg 파일을 불러와서 그냥 됨
  ansible all --list-hosts
    => 잘 보임
  ansible all -m gather_facts # 모두 보여줌
  ansible all -m gather_facts --limit 192.168.219.11
    => key, value 형태로 겁나 많이 나옮
       이걸 가지고 필터링 해서 사용함

4. 권한 요청하기, 모듈정의하고 설치 패키지 이름 정하기
  ansible all -m apt -a update_cache=true 
                      --become --ask-become-pass
  ansible all -m yum -a update_cache=true 
                      --become --ask-become-pass
    ==> module 을 정의하고(apt, yum) 업데이트를 결정
     https:#docs.ansible.com/ansible/latest 
     여기서 module을 검색해서 해당되는 명령을 입력하면됨
     잘 찾아서 해야함
     --become 은 관리자권한을 갖는 것이고
     --ask-become-pass는 암호를 입력한다는 뜻임
  ansible all -m apt -a name=vim-nox --become --ask-become-pass
      => name은 패키지 이름을 정의해서 설치를 진행
 
